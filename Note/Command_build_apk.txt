
https://docs.flutter.dev/deployment/android

1.
keytool -genkey -v -keystore %userprofile%\upload-keystore.jks -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 -alias upload


2. Create a file named [project]/android/key.properties that contains a reference to your keystore. Donâ€™t include the angle brackets (< >). They indicate that the text serves as a placeholder for your values.

storePassword=<password-from-previous-step>
keyPassword=<password-from-previous-step>
keyAlias=upload
storeFile=<keystore-file-location>

storePassword=123456
keyPassword=123456
keyAlias=upload
storeFile=C:\\Users\\chaovapan.panmee\\upload-keystore.jks

The storeFile might be located at /Users/<user name>/upload-keystore.jks on macOS or C:\\Users\\<user name>\\upload-keystore.jks on Windows.


3. Configure signing in gradle

3.1 Configure gradle to use your upload key when building your app in release mode by editing the [project]/android/app/build.gradle file.
Add the keystore information from your properties file before the android block:

   def keystoreProperties = new Properties()
   def keystorePropertiesFile = rootProject.file('key.properties')
   if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
   }

   android {
         ...
   }
   
3.2 Load the key.properties file into the keystoreProperties object.

Find the buildTypes block:

   buildTypes {
       release {
           // TODO: Add your own signing config for the release build.
           // Signing with the debug keys for now,
           // so `flutter run --release` works.
           signingConfig signingConfigs.debug
       }
   }

And replace it with the following signing configuration info:

   signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }
   buildTypes {
       release {
           signingConfig signingConfigs.release
       }
   }
   
4. Enabling multidex support
5. Reviewing the app manifest
6. Reviewing the Gradle build configuration
7. Building the app for release
	You have two possible release formats when publishing to the Play Store.

	App bundle (preferred)
	APK

8. Build an APK

flutter build apk --split-per-abi

D:\Workspace\ApkProject
D:\Workspace\RestAPI\flutter_scale_blackphonenix\build\app\outputs\flutter-apk\
D:\Workspace\RestAPI\spending_calendar\build\app\outputs\flutter-apk\
